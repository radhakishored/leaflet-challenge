

// Define arrays to hold created city and state markers
var earthquakes = [];
var stateMarkers = [];


d3.json( data, function(response){
	//console.log(response.fearues);
	L.geoJson(response, {
        onEachFeature: function(feature) {
            
			// Conditionals for data points
   //console.log(feature.properties.mag);
	if (feature.properties.mag  <= 1) {
        color = "#2fff78";
    } else if (feature.properties.mag  <= 2) {
        color = "#c8ff2f";
    } else if (feature.properties.mag  <= 3) {
        color = "#f8ff2f";
    } else if (feature.properties.mag  <= 4) {
        color = "#ffc12f";
    } else if (feature.properties.mag  <= 5) {
        color = "#ff862f";
    } else {
        color = "#ff2f2f";
    };	
	
	// Add circles to map
	Rev_coordinates=[feature.geometry.coordinates[1], feature.geometry.coordinates[0]];
  //console.log(Rev_coordinates);
  earthquakes.push(L.circle(Rev_coordinates,{
	  fillOpacity: 0.75,
      color: "white",
    fillColor: color,
    // Adjust radius
    radius: feature.properties.mag * 15000
  }).bindPopup("<h3>" + feature.properties.place + "</h3><hr><p>" + new Date(feature.properties.time) + "</p>" + "<p> Magnitude: " + feature.properties.mag + "</p>"))
	
	}
	
	});
	
});

// Loop through locations and create city and state markers
/*for (var i = 0; i < locations.length; i++) {
  // Setting the marker radius for the state by passing population into the markerSize function
  stateMarkers.push(
    L.circle(locations[i].coordinates, {
      stroke: false,
      fillOpacity: 0.75,
      color: "white",
      fillColor: "white",
      radius: markerSize(locations[i].state.population)
    })
  );

  // Setting the marker radius for the city by passing population into the markerSize function
  cityMarkers.push(
    L.circle(locations[i].coordinates, {
      stroke: false,
      fillOpacity: 0.75,
      color: "purple",
      fillColor: "purple",
      radius: markerSize(locations[i].city.population)
    })
  );
}*/


// Define variables for our base layers
var streetmap = L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}", {
  attribution: "Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>",
  maxZoom: 18,
  id: "mapbox.streets",
  accessToken: API_KEY
});

var darkmap = L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}", {
  attribution: "Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>",
  maxZoom: 18,
  id: "mapbox.dark",
  accessToken: API_KEY
});

// Create two separate layer groups: one for cities and one for states
var states = L.layerGroup(earthquakes);
var cities = L.layerGroup(cityMarkers);

// Create a baseMaps object
var baseMaps = {
  "Street Map": streetmap,
  "Dark Map": darkmap
};

// Create an overlay object
var overlayMaps = {
  "State Population": states,
  "City Population": cities
};

// Define a map object
var myMap = L.map("map", {
  center: [37.09, -95.71],
  zoom: 5,
  layers: [streetmap, states, cities]
});

// Pass our map layers into our layer control
// Add the layer control to the map
L.control.layers(baseMaps, overlayMaps, {
  collapsed: false
}).addTo(myMap);
